// 순위 알고리즘 : 점수 데이터에 대한 순위 구하기

//[?] 주어진 데이터의 순위를 구하기

// 1. scores 의 길이만큼 모두 1등으로 초기화
// 2. 요소를 비교하며 나보다 순위가 높은 데이터가 나오면 rankings의 값을 변경.

// ... 매 반복에서 순위 배열의 현재 순위를 1등으로 초기화.
// ... >> 이미 배열이 1등으로 초기화가 되어있긴 한데, 더 확실한 비교를 위한?
// ... 현재[i]요소와 나머지 요소[j] 들을 비교했을 때, 나보다 큰 점수가 등장하면, 현재 순위를 증감.

//... 이 풀이에서는 같은 값이 나오든 말든 나보다 큰 점수들의 갯수만을 비교하기 때문에,
//... 동일한 값이 다른 순서로 등장해도 순위 자체에 영향을 주지 않음.

(() => {
  //input
  let scores = [90, 87, 100, 95, 80];
  let rankings = Array(5).fill(1);
  let N = scores.length;

  //process
  for (let i = 0; i < N; i++) {
    // rankings[i] = 1; // 순위 배열을 매 반복마다 1등으로 초기화
    for (let j = 0; j < N; j++) {
      if (scores[i] < scores[j]) {
        //현재(i)와 나머지(j)들을 비교했을 때, 나보다 큰 점수가 나오면 증감.
        rankings[i]++;
      }
    }
  }

  //output
  for (let i = 0; i < N; i++) {
    console.log(`${scores[i].toString().padStart(3)}점: ${rankings[i]}등`);
  }
})();

//padStart(n) n만큼 문자열 앞쪽에 공백 추가
