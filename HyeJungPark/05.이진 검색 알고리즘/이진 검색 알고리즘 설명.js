/*
[검색 알고리즘]
: search 배열 등의 데이터에서 특정 값을 검색하는 알고리즘 (있다? 없다?) - 얼마나 효율적으로 검색하는가.
순차 검색과 이진 검색으로 구분할 수 있음

-순차 검색 : 전체 데이터 처음부터 끝까지 순서대로.
-이진 검색 : 정렬되어 있는 데이터를 절반으로 나눠서 검색한다.


[이진 검색 알고리즘]
: Binary Search 주어진 데이터가 "오름차순"으로 정렬되어 있다고 가정. 
실제 데이터가 정렬되어 있지 않은 경우, 정렬 알고리즘 등으로 먼저 정렬하고, 이진 검색 알고리즘 로직을 적용해야함.

Divide and Conquer 나누기 및 정복 => 데이터를 (계속) 절반 나눠서 검색하기 때문에 순차 검색보다 효율을 높인다. 

: 1차원 배열에 데이터가 존재하고 있다면 이들의 "중간 인덱스" 값을 찾는 것이 핵심.
1. (low 인덱스 + high 인덱스) / 2 => 중간 인덱스 도출
2. 내가 찾을 값과 mid 인덱스의 값을 비교해서, mid 인덱스 기준 좌측(작은 쪽)을 검색할지 우측(큰 쪽)을 검색할지 결정할 수 있다. 그와 다른 값들은 무시된다.(오름차순으로 정렬되어 있기 때문에)
3. 우측을 검색하기로 했을 때는 low 인덱스를 mid + 1로, 좌측을 검색하기로 했을 때는 high 인덱스를 mid-1로 옮겨서 범위를 좁혀주는 과정이 필요하다. 
4. 짝수일때는 나눈 값의 반내림값이 mid 인덱스가 된다. 
*/
